sdavidhalter / jedi-vimet nocursorline " don't highlight current line


" keyboard shortcuts
inoremap jj <ESC>

"supertab
let g:SuperTabDefaultCompletionType = "context"
godef
let g:godef_same_file_in_same_window=1
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist
let g:gocode_gofmt_tabwidth=4
autocmd BufWritePost *.go !gofmt -tabindent=false -tabwidth=4%

" json plugin
au! BufRead,BufNewFile *.json set filetype=json
augroup json_autocmd 
    autocmd! 
    autocmd FileType json set autoindent 
    autocmd FileType json set formatoptions=tcq2l 
    autocmd FileType json set textwidth=78 shiftwidth=2 
    autocmd FileType json set softtabstop=2 tabstop=8 
    autocmd FileType json set expandtab 
    autocmd FileType json set foldmethod=syntax 
augroup
" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" the android development settings
" {{{
let g:android_sdk_path = '/Users/liyajie1209/adt-bundle-mac-x86_64/sdk'
let g:ant_path = '/usr/local/bin/ant'
" }}}
"doxgentoolkit configuration
" {{{
let g:DoxygenToolkit_briefTag_pre="@Synopsis  "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_returnTag="@Returns   "
let g:DoxygenToolkit_blockHeader="-------------------------------"
let g:DoxygenToolkit_blockFooter="---------------------------------"
let g:DoxygenToolkit_authorName="Mathias Lorente"
let g:DoxygenToolkit_licenseTag="My own license" <-- !!! Does not end with "\<enter>"
" }}}
" tag highlight settings
if ! exists('g:TagHighlightSettings')
    let g:TagHighlightSettings = {}
endif
let g:TagHighlightSettings['ForcedPythonVariant'] = 'if_pyth'
let g:TagHighlightSettings['CtagsExecutable'] = 'etags'
" gui settings
set background=dark
color mango
"colorscheme gruvbox
let g:rehash256 = 1
"if has("gui_running")
    " let s:uname = system("uname")
    " if s:uname == 'Darwin\n'
set guifont = PowerlineSymbols
    " endif
"endif
"let g:molokai_original = 1
" if (&t_co == 256 || has('gui_running'))
"    if ($term_program == 'iterm.app')
"       colorscheme solarized
"   else
"      colorscheme desert
"      "colorscheme solarized 
"    endif
" endif


â€œnode complete 
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0

let g:nodejs_complete_config = {
\  'js_compl_fn': 'jscomplete#CompleteJS',
\  'max_node_compl_len': 15
\}

"the python configuration
" python-mode                                                                   
" " https://github.com/klen/python-mode                                           
let g:pymode_virtualenv=1 " Auto fix vim python paths if virtualenv enabled        
let g:pymode_folding=1  " Enable python folding                                 
"let g:pymode_utils_whitespaces=0  " Do not autoremove unused whitespaces        
map <Leader>rgd :call RopeGotoDefinition()<CR>                                  
map <Leader>pl :PyLint<CR>                                                      
let ropevim_enable_shortcuts=1                                                  
let g:pymode_rope_goto_def_newwin="vnew"                                        
let g:pymode_rope_extended_complete=1                                           
let g:pymode_syntax=1                                                           
let g:pymode_syntax_builtin_objs=0                                              
let g:pymode_syntax_builtin_funcs=0                                             
let g:pymode_lint_ignore = "C0110 Exported"  " ignore pep257 missing
" docstring warning
let g:pymode_lint_minheight = 5   " Minimal height of pylint error window          
let g:pymode_lint_maxheight = 15  " Maximal height of pylint error window          
let g:pymode_lint_write = 0  " Disable pylint checking every save               
let g:pymode_run_key = "<leader>run"  " default key conflicts with jedi-vim        
let g:pymode_lint_mccabe_complexity = 10                                        
let g:pymode_lint_checker="pyflakes,pep8,pep257,mccabe"                         
let g:pymode_syntax_highlight_self=0  " do not highlight self                   
let g:pymode_rope_vim_completion=0  " use jedi-vim for completion               
let g:pymode_rope_guess_project=0                                               
let g:pymode_doc_key="<leader>k"  " used jedi-vim for help  

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps
